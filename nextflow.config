/*
 * -------------------------------------------------
 *  nf-core/illuminavariantcalling Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags
  
  genome = false
  //reads = "../data/*{1,2}.fastq.gz"
  single_end = false
  outdir = './results'

  //dirs
  tracedir = "${params.outdir}/pipeline_info"
  
  // Boilerplate options
  name = false 
  help = false 
  monochrome_logs = false 

  //multiqc
  multiqc_config = false
  max_multiqc_email_size = 25.MB
  
  //Custom added arguments for variantcalling pipeline
  align = 'bwa'
  variant = 'freebayes'
  filter = 'bcftools'
  prediction = 'snippy'
  consensus = 'vcf'

  align_args = ''
  variant_args = ''
  filter_args = ''
  prediction_args = ''
  consensus_args = ''

  tool_args = [ 'align': [ 'align_args', 'bwa' ],
                'variant': [ 'variant_args', 'freebayes' ],
                'filter': [ 'filter_args', 'bcftools' ], 
                'prediction': [ 'prediction_args', 'snippy' ],
                'consensus': [ 'consensus_args', 'vcf' ]
                ]

  // Defaults only, expecting to be overwritten
  // Note: the default value has been changed
  max_memory = 512.GB
  max_cpus = 64
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/illuminavariantcalling:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/illuminavariantcalling'
  author = 'Drew Davies'
  homePage = 'https://github.com/nf-core/illuminavariantcalling'
  description = 'Illumina paired end reads variant calling pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
