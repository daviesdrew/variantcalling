/*
 * -------------------------------------------------
 *  nf-core/illuminavariantcalling Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

params {
  
  genome = false
  reads = "reads/*R{1,2}*.fastq.gz"
  phix = "data/phix.fa"
  ref = "test/ref.fa"
  single_end = false
  outdir = './results'
  //this will be the docker container by default
  container = ''
  travis = 'false'
    
  qc = 'false'
   
  tracedir = "${params.outdir}/pipeline_info"
  name = false 

  align = 'all'
  variant = 'freebayes'
  filter = 'bcftools'
  prediction = 'snippy'
  consensus = 'vcf'

  align_args = ''
  variant_args = ''
  filter_args = ''
  prediction_args = ''
  consensus_args = ''

  tool_args = [ 'align': [ 'align_args', 'bwa' ],
                'variant': [ 'variant_args', 'freebayes' ],
                'filter': [ 'filter_args', 'bcftools' ], 
                'prediction': [ 'prediction_args', 'snippy' ],
                'consensus': [ 'consensus_args', 'vcf' ]
                ]

  max_memory = 512.GB
  max_cpus = 64
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev

process.container = params.container
includeConfig 'conf/base.config'

profiles {
  
  conda { process.conda = "$baseDir/environment.yml" }
  
  debug { process.beforeScript = 'echo $HOSTNAME' }
  
  docker {
    docker.enabled = true
  }
  
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    //provide full container url to Singularity-Hub.org
    process.container = ''
  }
 
  slurm { includeConfig 'conf/slurm.config' }
   
  test { includeConfig 'conf/test.config' }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'daviesdrew/variantcalling'
  author = 'Drew Davies'
  homePage = 'https://github.com/nf-core/illuminavariantcalling'
  description = 'Pipeline for processing illumina paired end reads \
                    Steps \
                    1. Trimming and quality check \
                    2. Read Mapping \
                    3. Variant Calling \
                    4. Consensus Sequence Builder \
                    5. Coverage Plotting \
                Coverage plotting is under construction'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
